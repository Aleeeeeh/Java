package Chess.pieces;

import Boardgame.Board;
import Boardgame.Position;
import Chess.ChessMatch;
import Chess.ChessPiece;
import Chess.Color;

public class King extends ChessPiece {
	
	private ChessMatch chessMatch;

	public King(Board board, Color color, ChessMatch chessMatch) {
		super(board, color);
		this.chessMatch = chessMatch;

	}

	public String toString() {
		return "K";
	}

	// Movimentos Possiveis para o Rei
	private boolean canMove(Position position) {
		ChessPiece p = (ChessPiece)getBoard().piece(position);
		return p == null || p.getColor() != getColor();
	}
	//Teste para verificar se a torre está apta para o roque
	private boolean testRookCastling(Position position) {
		ChessPiece p = (ChessPiece)getBoard().piece(position);
		return p != null && p instanceof Rook && p.getColor() == getColor() && p.getMoveCount() == 0;
	}

	@Override
	public boolean[][] possibleMoves() {
		boolean [][] mat = new boolean[getBoard().getRows()][getBoard().getColumns()];
		
		Position p = new Position(0, 0);
		
		//Acima
		p.setValues(position.getRow() - 1, position.getColumn());
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		//Abaixo
		p.setValues(position.getRow() + 1, position.getColumn());
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		//Esquerda
		p.setValues(position.getRow(), position.getColumn() - 1);
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		//Direita
		p.setValues(position.getRow(), position.getColumn() + 1);
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		//Diagonal Esquerda
		p.setValues(position.getRow() - 1, position.getColumn() - 1);
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		//Diagonal Direita
		p.setValues(position.getRow() - 1, position.getColumn() + 1);
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		//Sudoeste
		p.setValues(position.getRow() + 1, position.getColumn() - 1);
		if(getBoard().positionExists(p) && canMove(p)) {
		mat [p.getRow()][p.getColumn()] = true;
		}
		//Sudeste
		p.setValues(position.getRow() + 1, position.getColumn() + 1);
		if(getBoard().positionExists(p) && canMove(p)) {
			mat [p.getRow()][p.getColumn()] = true;
		}
		
		//Movimento especial Roque
		//Senão estiver feito nenhum movimento E tambem não estiver em check
		if(getMoveCount() == 0 && !chessMatch.getCheck()) {
			//Movimento especial do Roque Pequeno
		Position posT1 = new Position(position.getRow(), position.getColumn() + 3);
		if(testRookCastling(posT1)) {
			
		}
		}
		
		return mat;
	}
}
		
	

